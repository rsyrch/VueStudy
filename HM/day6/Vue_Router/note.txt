一. WebPack项目初始化:
    1. cnpm init 进行项目的初始化：

    2. 由于在webpack4中已经不再默认安装 webpacl-cli，所以我们要手动安装 cnpm i webpack webpack-cli -D

    3. 根路径创建webpack.config.js

        const path = require('path')
        let config = {
          mode: 'none',
          entry: {
            main: path.join(__dirname, './src/main.js')
          },
          output: {
            filename: '[name].bundle.js',
            path: path.join(__dirname, './dist')
          }
        }
        module.exports = config

    4. package.json中的script添加:
    "build": "webpack --config webpack.config.js --progress --colors"

    5. webpack-dev-server安装:

        (1). package.json中的script添加:
        "scripts": {
            "dev": "webpack-dev-server"
        }

        (2). cnpm install webpack-dev-server

        (3). cnpm run dev

        webpack-dev-server 生成的bundle.js并没有存放在实际的物理磁盘,直接托管到了电内存中, 以一种虚拟的形式托管到了项目的根目录中


        --open                  自动打开浏览器
        --port 8000             设置端口
        --contentBase src       默认打开index.html
        --hot                   热加载,不会生成新的bundle.js


二. 模块
    1. 导入安装的模块
        const path = require("path");
        const webpack = require("webpack");
        const html_webpack_plugin = require("html-webpack-plugin");

    2. 启用html-webpack-plugin插件
        (1) index.html 会自动引入bundle.js
        (2) 配置: 在webpack.config.js中
            plugins: [
                new htmlWebpackPlugin({
                    template: path.join(__dirname, "./src/index.html"),     // 模板文件路径
                    filename: "index.html"      // 模板文件名
                })
            ]

三. webpack处理第三方文件
    1. 安装module:
        例如css文件:style-loader css-loader

    2. webpack.config.js
        module: {
            rules: [
                { test: /\.css$/, use: ['style-loader', 'css-loader'] }
            ]
        }
        (1) 发现不是js文件,查找rules规则
        (2) 从右向左匹配loader

    3. Babel
        (1) 将高级语法转换成低级语法
        (2) a. cnpm i babel-core babel-loader babel-plugin-transform-runtime -D
            b. cnpm i bable-preset-env babel-preset-stage-0 -D

        (3) a. {test:/\.js$/, use: "babel-loader", exclude:/node_modules/}
            b. exclude: 排除node_modules中的js文件, 防止node_modules的js文件被转换
        (4) 根目录生成.babelrc的配置文件, JSON格式   presets: 语法   transform: 插件
                {
                    "presets": ["env", "stage-0"],
                    "plugins": ["transform-runtime"]
                }


四. webpack中使用Vue
    1. 安装vue模块
    2. 导入vue  import Vue from "vue"
    3. webconfig.js
        resolve: {
            alias: {
                "vue$": "vue/dist/vue.js"
            }
        }
    4. import Vue from "vue" 导入了run-time vue 有些功能不完整
    5. webpack无法处理.vue文件 需要安装第三方loader   cnpm install vue-loader vue-template-compiler -D
    6. 对于.vue组件,要用render渲染
    7. vue-loader版本大于15 必须导入插件 const VueLoaderPlugin = require('vue-loader/lib/plugin') 否则找不到vue-loader


五. 组件的使用
    1. 导入模块:
        import 模块名 from "模块标识符"
        import "path"
    2. 成员暴露
        (1). export default
                代码: 
                export default Peron
                import Person from "./test"

        (2). export var moduleName  导入模块必须用 {} 接受, 且名字必须相同, 可以用as取别名
                代码: 
                export var ThePet = Pet
                import { ThePet as ThePet1 } from "./test"

    3. export default 只能向外暴露一次, 可以同时使用 前2者

    3. Node中使用
        (1). 模块导入: var moduleName = require("moduleIdentifier")
        (2). 成员暴露: module.exports 和 exports


六. 路由的使用
    1. 安装路由模块   cnpm i vue-router -D
    2. 导入路由      import VueRouter from "vue-loader"
    3. 安装路由功能   Vue.use(VueRouter)
