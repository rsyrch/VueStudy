一. WebPack项目初始化:
    1. cnpm init 进行项目的初始化：

    2. 由于在webpack4中已经不再默认安装 webpacl-cli，所以我们要手动安装 cnpm i webpack webpack-cli -D

    3. 根路径创建webpack.config.js

        const path = require('path')
        let config = {
          mode: 'none',
          entry: {
            main: path.join(__dirname, './src/main.js')
          },
          output: {
            filename: '[name].bundle.js',
            path: path.join(__dirname, './dist')
          }
        }
    module.exports = config

    4. package.json中的script添加:
    "build": "webpack --config webpack.config.js --progress --colors"

    5. webpack-dev-server安装:

        (1). package.json中的script添加:
        "scripts": {
            "dev": "webpack-dev-server"
        }

        (2). cnpm install webpack-dev-server

        (3). cnpm run dev

        webpack-dev-server 生成的bundle.js并没有存放在实际的物理磁盘,直接托管到了电内存中, 以一种虚拟的形式托管到了项目的根目录中


        --open                  自动打开浏览器
        --port 8000             设置端口
        --contentBase src       默认打开index.html
        --hot                   热加载,不会生成新的bundle.js


二. 模块
    1. 导入安装的模块
        const path = require("path");
        const webpack = require("webpack");
        const html_webpack_plugin = require("html-webpack-plugin");

    2. 启用html-webpack-plugin插件
        index.html 会自动引入bundle.js

三. webpack处理第三方文件
    1. 安装module:
        例如css文件:style-loader css-loader

    2. webpack.config.js
        module: {
            rules: [
                { test: /\.css$/, use: ['style-loader', 'css-loader'] }
            ]
        }
        (1) 发现不是js文件,查找rules规则
        (2) 从右向左匹配loader